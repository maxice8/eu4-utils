#!/usr/bin/env python3
# lexpar


import argparse
import pprint
import sys
from os.path import basename

from Paradox_Localisation import LocalisationLexer, LocalisationParser
from Simple_Clausewitz import SimpleCWLexer, SimpleCWParser


def parse_args(args=None):
    desc = """
    Lex Clausewitz script files
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument(
        "files",
        type=argparse.FileType("r"),
        action="store",
        nargs="+",
        help="one or more files to Lex",
    )
    parser.add_argument(
        "-l",
        "--localise",
        action="store_true",
        default=False,
        help="Use Localisation Lexer and Parser instead of Clausewitz's",
    )
    parser.add_argument(
        "-p",
        "--parse",
        action="store_true",
        default=False,
        help="Parse file after Lexing",
    )
    parser.add_argument(
        "-t" "--pretty",
        action="store_true",
        default=False,
        help="use prettyPrint to print the result",
    )
    parser.add_argument(
        "-j",
        "--json",
        action="store_true",
        default=False,
        help="print JSON",
    )
    return parser.parse_args(args)


def main(args=None) -> int:
    args = parse_args(args)

    lexer = None
    parser = None

    if args.t__pretty and args.json:
        print(
            "%s: pretty-printing and print JSON are mutually exclusive"
            % basename(__file__),
            file=sys.stderr,
        )
        return 1

    if args.json:
        if not args.parse:
            print(
                "%s: json output requires parsing" % basename(__file__), file=sys.stderr
            )
            return 1

    if args.t__pretty:
        if not args.parse:
            print(
                "%s: pretty-printing requires parsing" % basename(__file__),
                file=sys.stderr,
            )
            return 1
        pp = pprint.PrettyPrinter(indent=2)

    if args.localise:
        lexer = LocalisationLexer()

        if args.parse:
            parser = LocalisationParser()

    else:
        lexer = SimpleCWLexer()
        if args.parse:
            parser = SimpleCWParser()

    for file in args.files:
        tokens = lexer.tokenize(file.read())
        if args.parse:
            parsed = parser.parse(tokens)
            if args.t__pretty:
                pp.pprint(parsed)
            elif args.json:
                import json

                print(json.dumps(parsed))
            else:
                print(parsed)
        else:
            for tok in tokens:
                print(tok)

    return 0


if __name__ == "__main__":
    sys.exit(main())
